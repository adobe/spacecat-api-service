import:
  post:
    tags:
      - import
    summary: Create a new import job
    description: |
      This endpoint starts a new import job with a set of URLs, an import API key, an optional import.js 
      mapping file, and optional custom headers. The job runs asynchronously, and its status can be 
      queried at /tools/import/jobs/{jobId}.
      
      If no import queue is available when the request is made, the endpoint returns a 503 Service 
      Unavailable response. Each client is allowed only one active import job; additional requests 
      will receive a 429 Too Many Requests response.
  
      An import job may include a type, specifying the kind of job to create. The available options 
      are 'doc' and 'xwalk', with 'doc' as the default if no type is provided.
    operationId: startImportJob
    security:
      - scoped_api_key: [ ]
    parameters:
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key. This same key will be required to fetch the job status, 
          and final .zip result.
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: './schemas.yaml#/ImportJobRequest'
    responses:
      '202':
        description: Import job accepted for processing.
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ImportJobStatus'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '429':
        $ref: './responses.yaml#/429'
      '500':
        $ref: './responses.yaml#/500'
      '503':
        $ref: './responses.yaml#/503'
import-job-status:
  get:
    tags:
      - import
    summary: Query the status of an import job
    description: |
      This endpoint can be used to query the status of an import job, given its jobId.
    operationId: getImportJobStatus
    security:
      - scoped_api_key: [ ]
    parameters:
      - $ref: './parameters.yaml#/jobId'
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key. Must match the key used to start the import job.
    responses:
      '200':
        description: Successful operation with an import status object returned.
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ImportJobStatus'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
  delete:
    tags:
      - import
    summary: Delete an import job
    description: |
      This endpoint can be used to delete an import job, given its jobId. This operation will remove
      all import URL entities in addition to the import job itself. The `imports.delete` scope is 
      required on the API key used to delete the import job, and only jobs created by the provided
      key can be deleted.
    operationId: deleteImportJob
    security:
      - scoped_api_key: [ ]
    parameters:
      - $ref: './parameters.yaml#/jobId'
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key. Must match the key used to start the import job, and
          include the imports.delete scope.
    responses:
      '204':
        description: Import job deleted successfully.
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
  patch:
    tags:
      - import
    summary: Patch an import job
    description: |
      This endpoint can be used to stop an import job, given its jobId. This operation will prevent
      any further scraping of the import job URLs, and mark the job status as STOPPED. The results
      will not be saved to storage, allowing the user to start a new import immediately.
    operationId: stopImportJob
    security:
      - scoped_api_key: [ ]
    requestBody:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: './schemas.yaml#/ImportJobStopRequest'
    parameters:
      - $ref: './parameters.yaml#/jobId'
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key. Must match the key used to start the import job, and
          include the imports.write scope.
    responses:
      '204':
        description: Import job stopped successfully.
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
import-job-progress:
  get:
    tags:
      - import
    summary: Query the progress of an import job
    description: |
      This endpoint can be used to query the progress of an import job, given its jobId.
    operationId: getImportJobProgress
    security:
      - scoped_api_key: [ ]
    parameters:
      - $ref: './parameters.yaml#/jobId'
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key. Must match the key used to start the import job.
    responses:
      '200':
        description: The current progress of the import job.
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ImportJobProgress'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
import-job-result:
  post:
    tags:
      - import
    summary: Request a pre-signed URL to download the result of an import job as a .zip archive
    description: |
      This endpoint can be used to download an archive of an import job, which will include
      all the resulting documents that were generated as part of the import. It will also 
      include the import-report.xlsx file, which contains a summary of the import job.
    operationId: getImportJobArchive
    security:
      - scoped_api_key: [ ]
    parameters:
      - $ref: './parameters.yaml#/jobId'
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key. Must match the key used to start the import job.
    responses:
      '200':
        description: Successful operation with an import archive delivered to the client.
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ImportJobArchive'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
import-assistant:
  post:
    tags:
      - import
    summary: Send a prompt to the import assistant
    description: |
      Note: Not implemented yet.

      This endpoint can be used to send prompts to the import assistant.
      Each prompt will make use of AI to analyze a URL and return
      choices in response to the request.
    operationId: processImportAssistant
    security:
      - scoped_api_key: [ ]
    requestBody:
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/ImportAssistantRequest'
    parameters:
      - in: header
        name: x-api-key
        schema:
          type: string
        description: |
          Client-specific import API key with the 'imports.assistant' scope.
    responses:
      '200':
        description: Contents of the response from the import AI assistant.
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ImportAssistantResponse'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
api-keys:
  post:
    tags:
      - api-keys
    summary: Create a new API key
    description: |
      This endpoint can be used to create a new API key with a set of scopes. The scoped API key will be
      returned in the response only once. The scoped API key can be used to authenticate the Spacecat APIs by
      including it in the x-api-key header.
    operationId: createApiKey
    security:
      - ims_key: [ ]
    requestBody:
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/ApiKeyRequest'
    parameters:
      - in: header
        name: x-gw-ims-org-id
        schema:
          type: string
        description: |
          IMS Organization Id of the client.
        example: '1234567890ABCDEF12345678@AdobeOrg'
    responses:
      '201':
        description: API key created successfully.
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ApiKeyResponse'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '403':
        $ref: './responses.yaml#/403-max-api-keys-exceeded'
      '500':
        $ref: './responses.yaml#/500'
  get:
    tags:
      - api-keys
    summary: Get all API keys owned by the given IMS client
    description:  |
      This endpoint can be used to list all the API keys created by the client.
    operationId: getApiKeys
    security:
      - ims_key: [ ]
    parameters:
      - in: header
        name: x-gw-ims-org-id
        schema:
          type: string
        description: |
          IMS Organization Id of the client.
        example: '1234567890ABCDEF12345678@AdobeOrg'
    responses:
      '200':
        description:  |
          API key metadata returned successfully. Note that the API key itself will not be included in this list, as it's only displayed once (at creation).
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: './schemas.yaml#/ApiKeyMetadataResponse'
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '500':
        $ref: './responses.yaml#/500'
api-key-deletion:
  delete:
    tags:
      - api-keys
    summary: Delete an API key
    description:  |
      This endpoint can be used to delete an API key. The API key will be marked as deleted in the system and
      will no longer be valid for authentication. Only keys created by this IMS client can be deleted by it.
    operationId: deleteApiKey
    security:
      - ims_key: [ ]
    parameters:
      - $ref: './parameters.yaml#/apiKeyId'
      - in: header
        name: x-gw-ims-org-id
        schema:
          type: string
        description: |
          IMS Organization Id of the client.
        example: '1234567890ABCDEF12345678@AdobeOrg'
    responses:
      '204':
        description: API key deleted successfully.
      '400':
        $ref: './responses.yaml#/400'
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
