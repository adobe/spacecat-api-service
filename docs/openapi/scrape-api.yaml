create-scrape-job:
  post:
    tags:
      - scrape
    security:
      - api_key: [ ]
    summary: Create new Scrape Job
    description: |
      ⚠️ **EXPERIMENTAL / PROTOTYPE**
      This endpoint allows you to create a new async url scrape job.
      The job is provided a list URLs to be scraped. The URLs are fed into a queue and processed 1 at a time.
      The returned jobId can be used to poll for the status and the results of the job.
    operationId: createScrapeJob
    requestBody:
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/ScrapeRequest'
    responses:
      '202':
        description: Job accepted
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/CreateAsyncJobAcceptedResponse'
      '400':
        $ref: './responses.yaml#/400-max-scrape-urls-exceeded'
      '401':
        $ref: './responses.yaml#/401'
      '500':
        $ref: './responses.yaml#/500'

get-scrape-job-status:
  parameters:
    - $ref: './parameters.yaml#/jobId'
  get:
    tags:
      - scrape
    security:
      - api_key: [ ]
    summary: Get Scrape Job Status
    description: |
      ⚠️ **EXPERIMENTAL / PROTOTYPE**
      This endpoint is used to retrieve the status of an async scrape job.
      The jobId must be provided in the path parameter. (see samples)
    operationId: getScrapeJobStatus
    responses:
      '200':
        description: Job status and (if available) result
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ScrapeResponse'
      '404':
        description: Job not found

get-scrape-job-url-results:
  parameters:
    - $ref: './parameters.yaml#/jobId'
  get:
    tags:
      - scrape
    security:
      - api_key: [ ]
    summary: Get Scrape Job URL Results
    description: |
      ⚠️ **EXPERIMENTAL / PROTOTYPE**
      This endpoint is used to retrieve the results of an async scrape job.
      The jobId must be provided in the path parameter. (see samples)
    operationId: getScrapeJobUrlResults
    responses:
      '200':
        description: Job results
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ScrapeJobUrlResultsResponse'
      '404':
        description: Job not found
      '500':
        $ref: './responses.yaml#/500'

get-scrape-jobs-by-date-range:
  parameters:
    - $ref: './parameters.yaml#/startDate'
    - $ref: './parameters.yaml#/endDate'
  get:
    tags:
      - scrape
    security:
      - api_key: [ ]
    summary: Get Scrape Jobs by Date Range
    description: |
      ⚠️ **EXPERIMENTAL / PROTOTYPE**
      This endpoint is used to retrieve the scrape jobs by date range.
      The startDate and endDate must be provided in the path parameter. (see samples)
    operationId: getScrapeJobsByDateRange
    responses:
      '200':
        description: Scrape jobs
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ScrapeJobsByDateRangeResponse'
      '400':
        $ref: './responses.yaml#/400'
      '500':
        $ref: './responses.yaml#/500'

get-scrape-jobs-by-base-url:
  parameters:
    - $ref: './parameters.yaml#/base64BaseUrl'
  get:
    tags:
      - scrape
    security:
      - api_key: [ ]
    summary: Get Scrape Jobs by Base URL
    description: |
      ⚠️ **EXPERIMENTAL / PROTOTYPE**
      This endpoint is used to retrieve the scrape jobs by base URL.
      The baseURL must be provided in the path parameter. (see samples)
    operationId: getScrapeJobsByBaseURL
    responses:
      '200':
        description: Scrape jobs
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ScrapeJobsByBaseURLResponse'
      '400':
        $ref: './responses.yaml#/400'
      '500':
        $ref: './responses.yaml#/500'

get-scrape-jobs-by-base-url-and-processing-type:
  parameters:
    - $ref: './parameters.yaml#/base64BaseUrl'
    - $ref: './parameters.yaml#/processingType'
  get:
    tags:
      - scrape
    security:
      - api_key: [ ]
    summary: Get Scrape Jobs by Base URL and Processing Type
    description: |
      ⚠️ **EXPERIMENTAL / PROTOTYPE**
      This endpoint is used to retrieve the scrape jobs by base URL.
      The baseURL and processingType must be provided in the path parameter
    operationId: getScrapeJobsByBaseURLAndProcessingType
    responses:
      '200':
        description: Scrape jobs
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ScrapeJobsByBaseURLResponse'
      '400':
        $ref: './responses.yaml#/400'
      '500':
        $ref: './responses.yaml#/500'

get-scraped-content-list:
  parameters:
    - $ref: './parameters.yaml#/siteId'
    - name: type
      in: path
      required: true
      description: The handler type of content to list (either 'scrapes' or 'imports').
      schema:
        type: string
        enum:
          - scrapes
          - imports
    - name: path
      in: query
      required: false
      description: |
        Optional path prefix to filter the recursive file search (e.g., 'about-us/' or 'docx/').
        If not specified, the search begins from the root directory of the specified type.
      schema:
        type: string
    - name: rootOnly
      in: query
      required: false
      description: |
        When set to true, returns only files directly under the specified prefix, excluding subdirectories.
        When false or omitted, includes all files recursively within subdirectories.
      schema:
        type: boolean
        default: false
    - name: pageSize
      in: query
      required: false
      description: Number of items to return per page. Default is 100, maximum is 1000.
      schema:
        type: integer
        default: 100
    - name: pageToken
      in: query
      required: false
      description: Pagination token obtained from the previous response's nextPageToken field.
      schema:
        type: string
  get:
    operationId: listScrapedContent
    tags:
      - scrape
    summary: List all files for a site and type
    description: |
      Retrieves a paginated list of files for the specified site and handler type (scrapes or imports).
      The search can be filtered by path prefix and can include or exclude subdirectories.

      Features:
      - Path filtering: Start the search from a specific subdirectory
      - Root-level filtering: Option to retrieve only root-level files
      - Pagination: Control the number of results per page and navigate through results

      Each file entry includes:
      - A unique key (full path relative to the content type root)
      - File name
      - File metadata (size and last modified timestamp)

    responses:
      '200':
        description: Successfully retrieved the list of files
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  $ref: './schemas.yaml#/ScrapedContentResponse'
                nextPageToken:
                  type: string
                  description: Token for retrieving the next page of results, if available.
      '401':
        $ref: './responses.yaml#/401'
      '404':
        $ref: './responses.yaml#/404'
      '500':
        $ref: './responses.yaml#/500'
    security:
      - api_key: []

get-files:
    get:
      tags:
        - scrape
      summary: Get a file by its storage key
      description: |
        Returns a pre-signed URL for accessing a file stored in S3.
        - Can be used to download or view the file content
      operationId: getFileByKey
      parameters:
        - name: siteId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the site
        - name: key
          in: query
          required: true
          description: The S3 object key (file path) of the file to retrieve
          schema:
            type: string
      responses:
        '302':
          description: Redirect to pre-signed URL for file access
          headers:
            Location:
              schema:
                type: string
              description: Pre-signed URL for accessing the file
        '401':
          $ref: './responses.yaml#/401'
        '404':
          $ref: './responses.yaml#/404'
        '500':
          $ref: './responses.yaml#/500'
      security:
        - scoped_api_key: [ ]
        - cookie_auth: [ ]
